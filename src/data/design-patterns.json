{
  "patterns": [
    {
      "ref_id": "1",
      "title": "Accordion",
      "description": "An accordion is a vertically stacked set of interactive headings that each contain a title, content snippet, or thumbnail representing a section of content.",
      "url": "https://www.w3.org/WAI/ARIA/apg/patterns/accordion/",
      "design_pattern": {
        "title": "About this pattern",
        "descriptions": [
          "An accordion is a vertically stacked set of interactive headings that each contain a title, content snippet, or thumbnail representing a section of content. The headings function as controls that enable users to reveal or hide their associated sections of content. Accordions are commonly used to reduce the need to scroll when presenting multiple sections of content on a single page."
        ],
        "functionality": {
          "title": "Keyboard Interaction",
          "interactions": [
            {
              "action": "Enter or Space",
              "description": [
                "When focus is on the accordion header for a collapsed panel, expands the associated panel. If the implementation allows only one panel to be expanded, and if another panel is expanded, collapses that panel.",
                "When focus is on the accordion header for an expanded panel, collapses the panel if the implementation supports collapsing. Some implementations require one panel to be expanded at all times and allow only one panel to be expanded; so, they do not support a collapse function."
              ]
            },
            {
              "action": "Tab",
              "description": [
                "Moves focus to the next focusable element; all focusable elements in the accordion are included in the page Tab sequence."
              ]
            },
            {
              "action": "Shift + Tab",
              "description": [
                "Moves focus to the previous focusable element; all focusable elements in the accordion are included in the page Tab sequence."
              ]
            },
            {
              "action": "Down Arrow (Optional)",
              "description": [
                "If focus is on an accordion header, moves focus to the next accordion header. If focus is on the last accordion header, either does nothing or moves focus to the first accordion header."
              ]
            },
            {
              "action": "Up Arrow (Optional)",
              "description": [
                "If focus is on an accordion header, moves focus to the previous accordion header. If focus is on the first accordion header, either does nothing or moves focus to the last accordion header."
              ]
            },
            {
              "action": "Home (Optional)",
              "description": ["When focus is on an accordion header, moves focus to the first accordion header."]
            },
            {
              "action": "End (Optional)",
              "description": ["When focus is on an accordion header, moves focus to the last accordion header."]
            }
          ]
        },
        "acceptance_criteria": {
          "title": "Accessible acceptance criteria",
          "requirements": [
            {
              "property": "button",
              "critiera": "The title of each accordion header is contained in an element with role button",
              "notes": null
            },
            {
              "property": "heading tag",
              "criteria": "Each accordion header button is wrapped in an element with role heading that has a value set for aria-level that is appropriate for the information architecture of the page.",
              "notes": [
                "If the native host language has an element with an implicit heading and aria-level, such as an HTML heading tag, a native host language element may be used.",
                "The button element is the only element inside the heading element. That is, if there are other visually persistent elements, they are not included inside the heading element."
              ]
            },
            {
              "property": "aria-expanded",
              "criteria": "If the accordion panel associated with an accordion header is visible, the header button element has aria-expanded set to true. If the panel is not visible, aria-expanded is set to false.",
              "notes": null
            },
            {
              "property": "aria-controls",
              "criteria": "The accordion header button element has aria-controls set to the ID of the element containing the accordion panel content.",
              "notes": null
            },
            {
              "property": "aria-disabled",
              "criteria": "If the accordion panel associated with an accordion header is visible, and if the accordion does not permit the panel to be collapsed, the header button element has aria-disabled set to true.",
              "notes": null
            },
            {
              "property": "region and aria-labelledby",
              "criteria": "Optionally, each element that serves as a container for panel content has role region and aria-labelledby with a value that refers to the button that controls display of the panel.",
              "notes": [
                "Avoid using the region role in circumstances that create landmark region proliferation, e.g., in an accordion that contains more than approximately 6 panels that can be expanded at the same time.",
                "Role region is especially helpful to the perception of structure by screen reader users when panels contain heading elements or a nested accordion."
              ]
            }
          ]
        }
      }
    },
    {
      "ref_id": "2",
      "title": "Alert",
      "description": "An alert is an element that displays a summary, important message in a way that attracts the user's attention without interrupting the user's task.",
      "url": "https://www.w3.org/WAI/ARIA/apg/patterns/alert/",
      "design_pattern": {
        "title": "About this pattern",
        "descriptions": [
          "An alert is an element that displays a summary, important message in a way that attracts the user's attention without interrupting the user's task. Dynamically rendered alerts are automatically announced by most screen readers, and in some operating systems, they may trigger an alert sound. It is important to note that, at this time, screen readers do not inform users of alerts that are present on the page before page load completes.",
          "Because alerts are intended to provide important and potentially time-sensitive information without interfering with the user's ability to continue working, it is crucial they do not affect keyboard focus. The Alert Dialog Pattern is designed for situations where interrupting work flow is necessary.",
          "It is also important to avoid designing alerts that disappear automatically. An alert that disappears too quickly can lead to failure to meet WCAG 2.0 success criterion 2.2.3. Another critical design consideration is the frequency of interruption caused by alerts. Frequent interruptions inhibit usability for people with visual and cognitive disabilities, which makes meeting the requirements of WCAG 2.0 success criterion 2.2.4 more difficult."
        ],
        "functionality": {
          "title": "Keyboard Interaction",
          "interactions": null
        },
        "acceptance_criteria": {
          "title": "Accessible acceptance criteria",
          "requirements": [
            {
              "property": "alert",
              "criteria": "The widget has a role of alert.",
              "notes": null
            }
          ]
        }
      }
    },
    {
      "ref_id": "3",
      "title": "Alert and Message Dialogs",
      "description": "An alert dialog is a modal dialog that interrupts the user's workflow to communicate an important message and acquire a response.",
      "url": "https://www.w3.org/WAI/ARIA/apg/patterns/alertdialog/",
      "design_pattern": {
        "title": "About this pattern",
        "descriptions": [
          "An alert dialog is a modal dialog that interrupts the user's workflow to communicate an important message and acquire a response. Examples include action confirmation prompts and error message confirmations. The alertdialog role enables assistive technologies and browsers to distinguish alert dialogs from other dialogs so they have the option of giving alert dialogs special treatment, such as playing a system alert sound."
        ],
        "functionality": {
          "title": "Keyboard Interaction",
          "interactions": [
            {
              "action": "On trigger",
              "description": ["When a dialog opens, focus moves to an element inside the dialog."]
            },
            {
              "action": "Tab",
              "description": [
                "Moves focus to the next tabbable element inside the dialog.",
                "If focus is on the last tabbable element inside the dialog, moves focus to the first tabbable element inside the dialog."
              ]
            },
            {
              "action": "Shift + Tab",
              "description": [
                "Moves focus to the previous tabbable element inside the dialog.",
                "If focus is on the first tabbable element inside the dialog, moves focus to the last tabbable element inside the dialog."
              ]
            },
            {
              "action": "Escape",
              "description": ["Closes the dialog"]
            }
          ]
        },
        "acceptance_criteria": {
          "title": "Accessible acceptance criteria",
          "requirements": [
            {
              "property": "alertdialog",
              "criteria": "The element that contains all elements of the dialog, including the alert message and any dialog buttons, has role alertdialog.",
              "notes": null
            },
            {
              "property": "aria-labelledby",
              "criteria": "The element with role alertdialog has a value for aria-labelledby that refers to the element containing the title of the dialog if the dialog has a visible label.",
              "notes": ["Alternatively you can use aria-label if the dialog does not have a visible label."]
            },
            {
              "property": "aria-label (alternative option)",
              "criteria": "The element with role alertdialog has a value for aria-label if the dialog does not have a visible label.",
              "notes": ["Consider using aria-labelledby if the dialog has a visible label or title."]
            },
            {
              "property": "aria-describedby",
              "criteria": "The element with role alertdialog has a value set for aria-describedby that refers to the element containing the alert message.",
              "notes": null
            }
          ]
        }
      }
    },
    {
      "ref_id": "4",
      "title": "Breadcrumb",
      "description": "A breadcrumb trail consists of a list of links to the parent pages of the current page in hierarchical order.",
      "url": "https://www.w3.org/WAI/ARIA/apg/patterns/breadcrumb/",
      "design_pattern": {
        "title": "About this pattern",
        "descriptions": [
          "A breadcrumb trail consists of a list of links to the parent pages of the current page in hierarchical order. It helps users find their place within a website or web application. Breadcrumbs are often placed horizontally before a page's main content."
        ],
        "functionality": {
          "title": "Keyboard Interaction",
          "interactions": null
        },
        "acceptance_criteria": {
          "title": "Accessible acceptance criteria",
          "requirements": [
            {
              "property": "nav landmark region",
              "criteria": "Breadcrumb trail is contained within a navigation landmark region.",
              "notes": null
            },
            {
              "property": "aria-label or aria-labelledby",
              "criteria": "The landmark region is labelled via aria-label or aria-labelledby.",
              "notes": null
            },
            {
              "property": "aria-current",
              "criteria": "The link to the current page has aria-current set to page. If the element representing the current page is not a link, aria-current is optional.",
              "notes": null
            }
          ]
        }
      }
    },
    {
      "ref_id": "5",
      "title": "Button",
      "description": "A button is a widget that enables users to trigger an action or event, such as submitting a form, opening a dialog, canceling an action, or performing a delete operation.",
      "url": "https://www.w3.org/WAI/ARIA/apg/patterns/button/",
      "design_pattern": {
        "title": "About this pattern",
        "descriptions": [
          "A button is a widget that enables users to trigger an action or event, such as submitting a form, opening a dialog, canceling an action, or performing a delete operation."
        ],
        "functionality": {
          "title": "Keyboard Interaction",
          "interactions": [
            {
              "action": "Space or Enter",
              "description": ["Activates the button when the button has focus"]
            }
          ]
        },
        "acceptance_criteria": {
          "title": "Accessible acceptance criteria",
          "requirements": [
            {
              "property": "role",
              "criteria": "The button has role of button.",
              "notes": null
            },
            {
              "property": "aria-label or aria-labelledby",
              "criteria": "The button has an accessible label. By default, the accessible name is computed from any text content inside the button element. However, it can also be provided with aria-labelledby or aria-label.",
              "notes": null
            },
            {
              "property": "aria-describedby",
              "criteria": "If a description of the button's function is present, the button element has aria-describedby set to the ID of the element containing the description.",
              "notes": null
            },
            {
              "property": "aria-disabled",
              "criteria": "When the action associated with a button is unavailable, the button has aria-disabled set to true.",
              "notes": null
            },
            {
              "property": "aria-pressed",
              "criteria": "If the button is a toggle button, it has an aria-pressed state. When the button is toggled on, the value of this state is true, and when toggled off, the state is false.",
              "notes": null
            }
          ]
        }
      }
    },
    {
      "ref_id": "6",
      "title": "Carousel",
      "description": "A carousel presents a set of items, referred to as slides, by sequentially displaying a subset of one or more slides.",
      "url": "https://www.w3.org/WAI/ARIA/apg/patterns/carousel/",
      "design_pattern": {
        "title": "About this pattern",
        "descriptions": [
          "A carousel presents a set of items, referred to as slides, by sequentially displaying a subset of one or more slides. Typically, one slide is displayed at a time, and users can activate a next or previous slide control that hides the current slide and rotates the next or previous slide into view. In some implementations, rotation automatically starts when the page loads, and it may also automatically stop once all the slides have been displayed. While a slide may contain any type of content, image carousels where each slide contains nothing more than a single image are common.",
          "Ensuring all users can easily control and are not adversely affected by slide rotation is an essential aspect of making carousels accessible. For instance, the screen reader experience can be confusing and disorienting if slides that are not visible on screen are incorrectly hidden, e.g., displayed off-screen. Similarly, if slides rotate automatically and a screen reader user is not aware of the rotation, the user may read an element on slide one, execute the screen reader command for next element, and, instead of hearing the next element on slide one, hear an element from slide 2 without any knowledge that the element just announced is from an entirely new context."
        ],
        "functionality": {
          "title": "Keyboard Interaction",
          "interactions": [
            {
              "action": "Auto play",
              "description": [
                "If the carousel has an auto-rotate feature, automatic slide rotation stops when any element in the carousel receives keyboard focus. It does not resume unless the user activates the rotation control."
              ]
            },
            {
              "action": "Tab and Shift + Tab",
              "description": "Tab and Shift + Tab: Move focus through the interactive elements of the carousel as specified by the page tab sequence -- scripting for Tab is not necessary."
            },
            {
              "action": "Space or Enter when control buttons in focus",
              "description": "Button elements implement the keyboard interaction defined in the button pattern. Note: Activating the rotation control, next slide, and previous slide do not move focus, so users may easily repetitively activate them as many times as desired."
            },
            {
              "action": "Rotation controls",
              "description": "If present, the rotation control is the first element in the Tab sequence inside the carousel. It is essential that it precede the rotating content so it can be easily located."
            },
            {
              "action": "Tab elements (pagination)",
              "description": "If tab elements are used for slide picker controls, they implement the keyboard interaction defined in the Tabs Pattern."
            }
          ]
        },
        "acceptance_criteria": {
          "title": "Accessible acceptance criteria",
          "requirements": [
            {
              "property": "role",
              "criteria": "The button has role of button.",
              "notes": null
            },
            {
              "property": "aria-label or aria-labelledby",
              "criteria": "The button has an accessible label. By default, the accessible name is computed from any text content inside the button element. However, it can also be provided with aria-labelledby or aria-label.",
              "notes": null
            },
            {
              "property": "aria-describedby",
              "criteria": "If a description of the button's function is present, the button element has aria-describedby set to the ID of the element containing the description.",
              "notes": null
            },
            {
              "property": "aria-disabled",
              "criteria": "When the action associated with a button is unavailable, the button has aria-disabled set to true.",
              "notes": null
            },
            {
              "property": "aria-pressed",
              "criteria": "If the button is a toggle button, it has an aria-pressed state. When the button is toggled on, the value of this state is true, and when toggled off, the state is false.",
              "notes": null
            }
          ]
        }
      }
    }
  ]
}
